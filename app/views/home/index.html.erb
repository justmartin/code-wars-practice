<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Formatting decimal places #0</h3>
    <p>Each number should be formatted that it is rounded to two decimal places. You don't need to check whether the input is a valid number because only valid numbers are used in the tests.</p>
    <a data-toggle="collapse" href="#collapse1">Answer</a>
  </div>

  <div id="collapse1" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def two_decimal_places(n)
  n.round(2)
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">How many lightsabers do you own?</h3>
    <p>Inspired by the development team at Vooza, write the function howManyLightsabersDoYouOwn that accepts the name of a programmer, and returns the number of lightsabers owned by that person. The only person who owns lightsabers is Zach, by the way. He owns 18, which is an awesome number of lightsabers. Anyone else owns 0.</p>
    <a data-toggle="collapse" href="#collapse2">Answer</a>
  </div>

  <div id="collapse2" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def howManyLightsabersDoYouOwn(name = "")
  if name == "Zach"
    18
  else
    0
  end
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def howManyLightsabersDoYouOwn(name="")
  name == "Zach" ? 18 : 0
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Are You Playing Banjo?</h3>
    <p>Create a function which answers the question "Are you playing Banjo?". If your name starts with the letter "R" or lower case "r", you are playing Banjo!</p>
    <a data-toggle="collapse" href="#collapse3">Answer</a>
  </div>

  <div id="collapse3" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def are_you_playing_banjo(name)
  if name.downcase[0] == "r"
    name + " plays banjo"
  else
    name + " does not play banjo"
  end
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def are_you_playing_banjo(name)
  name[0].downcase == "r" ? "#{name} plays banjo" : "#{name} does not play banjo"
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Removing Elements</h3>
    <p>Take an array and remove every second element out of that array. Always keep the first element and start removing with the next element.</p>
    <a data-toggle="collapse" href="#collapse4">Answer</a>
  </div>

  <div id="collapse4" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def remove_every_other(arr)
  arr.select.each_with_index { |_, i| i.even? }
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Even or Odd</h3>
    <p>Create a function that takes an integer as an argument and returns "Even" for even numbers or "Odd" for odd numbers.</p>
    <a data-toggle="collapse" href="#collapse5">Answer</a>
  </div>

  <div id="collapse5" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def even_or_odd(number)
  number.even? ? "Even" : "Odd"
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Friend or Foe?</h3>
    <p>Make a program that filters a list of strings and returns a list with only your friends name in it. If a name has 4 letters in it, you can be sure that it has to be a friend of yours!</p>
    <a data-toggle="collapse" href="#collapse6">Answer</a>
  </div>

  <div id="collapse6" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def friend(friends)
  arr = []
  friends.collect { |x| arr.push(x) if x.length == 4  }
  return arr
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def friend(friends)
  friends.select { |name| name.length == 4 }
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Sum of two lowest positive integers</h3>
    <p>Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 integers. No floats or empty arrays will be passed.</p>
    <a data-toggle="collapse" href="#collapse7">Answer</a>
  </div>

  <div id="collapse7" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def sum_two_smallest_numbers(numbers)
  sorted = numbers.sort
  min1 = sorted[0]
  min2 = sorted[1]
  result = min1 + min2
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def sum_two_smallest_numbers(numbers)
  numbers.min(2).reduce(:+)
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Highest and Lowest</h3>
    <p>In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.</p>
    <a data-toggle="collapse" href="#collapse8">Answer</a>
  </div>

  <div id="collapse8" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def high_and_low(numbers)
  arr = numbers.split(" ").map(&:to_i).minmax
  min = arr[0].to_s
  max = arr[1].to_s
  result = max + " " + min
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def high_and_low(numbers)
  numbers.split.map(&:to_i).minmax.reverse.join(' ')
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def high_and_low(numbers)
  a = numbers.split.map(&:to_i).sort
  "#{a.last} #{a.first}"
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Make a function that does arithmetic!</h3>
    <p>Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. a and b will both be positive integers, and a will always be the first number in the operation, and b always the second. The four operators are "add", "subtract", "divide", "multiply".</p>
    <a data-toggle="collapse" href="#collapse9">Answer</a>
  </div>

  <div id="collapse9" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def arithmetic(a, b, operator)
  if operator == "add"
    a + b
  elsif operator == "subtract"
    a - b
  elsif operator == "divide"
    a / b
  elsif operator == "multiply"
   a * b
  end
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def arithmetic(a, b, operator)
 ar={"add"=>a+b,"subtract"=>a-b,"multiply"=>a*b,"divide"=>a.div(b)}
 ar[operator]
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Convert number to reversed array of digits</h3>
    <p>Given a random number: You have to return the digits of this number within an array in reverse order.</p>
    <a data-toggle="collapse" href="#collapse10">Answer</a>
  </div>

  <div id="collapse10" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def digitize(n)
  n.to_s.split("").map(&:to_i).reverse
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Convert a string to an array</h3>
    <p>Write a function to split a string and convert it into an array of words. 
    e.g. 
    string_to_array("Robin Singh") => ["Robin", "Singh"],
    string_to_array("I love arrays they are my favorite") => ["I", "love", "arrays", "they", "are", "my", "favorite"]</p>
    <a data-toggle="collapse" href="#collapse11">Answer</a>
  </div>

  <div id="collapse11" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def string_to_array(string)
  string.split(" ")
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Descending Order</h3>
    <p>Your task is to make a function that can take any non-negative integer as a argument and return it with it's digits in descending order. Descending order means that you take the highest digit and place the next highest digit immediately after it.</p>
    <a data-toggle="collapse" href="#collapse12">Answer</a>
  </div>

  <div id="collapse12" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def descending_order(n)
  n.to_s.split("").sort.reverse.join.to_i
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Convert an array of strings to array of numbers</h3>
    <p>#Oh no! ###Some really funny web dev gave you an array of numbers from his API response as an array of strings! You need to cast the whole array to the correct type. Create a function that takes as a parameter an array of numbers represented as strings and outputs an array of numbers.</p>
    <a data-toggle="collapse" href="#collapse13">Answer</a>
  </div>

  <div id="collapse13" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def to_number_array(string_array)
  string_array.map(&:to_f)
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Remove the minimum</h3>
    <p>Given an array of integers, remove the smallest value. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list. Don't change the order of the elements that are left.</p>
    <a data-toggle="collapse" href="#collapse14">Answer</a>
  </div>

  <div id="collapse14" class="panel-collapse collapse">
  <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def remove_smallest(numbers)
  if numbers != []
    min = numbers.index(numbers.min)
    numbers.delete_at(min)
    numbers
  else
    []
  end
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def remove_smallest(numbers)
  return [] if numbers.empty?
  numbers.delete_at(numbers.index(numbers.min))
  return numbers
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Reverse a string w/out .reverse</h3>
    <p>Given an array of letters ["j", "u", "s", "t", "i", "n"] return the reverse without using ruby's built in function. Answer = ["n", "i", "t", "s", "u", "j"]</p>
    <a data-toggle="collapse" href="#collapse16">Answer</a>
  </div>

  <div id="collapse16" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def reverse_array(arr)
  result = []
  arr.each |x| do
    y = arr.pop
    result.push(y)
  end
  result
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Bubble Sort</h3>
    <p>Sort an array without using ruby's built in sort function.</p>
    <a data-toggle="collapse" href="#collapse15">Answer</a>
  </div>

  <div id="collapse15" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
numbers = [1, 3, 2, 5, 4] # => [1, 2, 3, 4, 5]

numbers.each_index do |index|
  next if numbers[index + 1] == nil

  if numbers[index] > numbers[index + 1]
    numbers[index], numbers[index + 1] = numbers[index + 1], numbers[index]
  end
end

p numbers
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">English Version of Number</h3>
    <p>Given an array of numbers, write a function to output the english version. [1, 2, 3] => ['one', 'two', 'three']</p>
    <a data-toggle="collapse" href="#collapse17">Answer</a>
  </div>

  <div id="collapse17" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def english_version(arr)
  result = []
  arr.each |num| do
    eng = {"1" => "one", "2" => "two", "3" => "three"}
    result.push(eng(num))
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Beginner Series #3 Sum of Numbers</h3>
    <p>Given two integers, which can be positive and negative, find the sum of all the numbers between including them too and return it. If both numbers are equal return a or b. Note! a and b are not ordered!
    Test.assert_equals(get_sum(5,-1),14)</p>
    <a data-toggle="collapse" href="#collapse18">Answer</a>
  </div>

  <div id="collapse18" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def get_sum(a,b)
  arr = [a, b].sort
  (arr[0]..arr[1]).to_a.inject(:+)
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def get_sum(a,b)
  return a < b ? (a..b).reduce(:+) : (b..a).reduce(:+) 
end
</pre>

    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Summing a number's digits</h3>
    <p>Write a function named sumDigits which takes a number as input and returns the sum of the absolute value of each of the number's decimal digits.</p>
    <a data-toggle="collapse" href="#collapse19">Answer</a>
  </div>

  <div id="collapse19" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def sumDigits(num)
  num.to_s.split("").map(&:to_i).inject(:+)
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">List Filtering</h3>
    <p>Create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.</p>
    <a data-toggle="collapse" href="#collapse20">Answer</a>
  </div>

  <div id="collapse20" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def filter_list(l)
  result= []
  l.each do |x|
    if x.is_a?(Integer)
      result.push(x)
    end
  end
  result
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def filter_list(l)
l.select{|i| i.is_a?(Integer)}
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Javascript filter - 1</h3>
    <p>While developing a website, you detect that some of the members have troubles logging in. Searching through the code you find that all logins ending with a "_" make problems. So you want to write a function that takes an array of pairs of login-names and e-mails, and outputs an array of all login-name, e-mails-pairs from the login-names that end with "_". [[ "foo", "foo@foo.com" ], [ "bar_", "bar@bar.com" ]] => [[ "bar_", "bar@bar.com" ]]</p>
    <a data-toggle="collapse" href="#collapse21">Answer</a>
  </div>

  <div id="collapse21" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def search_names(logins)
  results = []
  logins.each do |x|
    if x[0].split("").pop == "_"
      results.push(x)
    end
  end
  results
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def search_names(logins)
  logins.select { |nick, mail| nick.end_with?('_') }
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Shortest Word</h3>
    <p>x Simple, given a string of words, return the length of the shortest word(s). String will never be empty and you do not need to account for different data types.</p>
    <a data-toggle="collapse" href="#collapse22">Answer</a>
  </div>

  <div id="collapse22" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def find_short(s)
  z = []
  arr = s.split(" ")
  arr.each do |x|
    z.push(x.length)
  end
  z.min
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def find_short(s)
  s.split.map(&:size).min
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Sort Numbers</h3>
    <p>Finish the solution so that it sorts the passed in array of numbers. If the function passes in an empty array or null/nil value then it should return an empty array.</p>
    <a data-toggle="collapse" href="#collapse23">Answer</a>
  </div>

  <div id="collapse23" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def solution(nums)
 nums ? nums.sort : []
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Stop gninnipS My sdroW!</h3>
    <p>Write a function that takes in a string of one or more words, and returns the same string, but with all five or more letter words reversed (Just like the name of this Kata). Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.
    Example: spinWords( "Hey fellow warriors" ) => returns "Hey wollef sroirraw" </p>
    <a data-toggle="collapse" href="#collapse24">Answer</a>
  </div>

  <div id="collapse24" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def spinWords(string)
  results = []
  arr = string.split(" ")
  arr.each do |word|
    if word.length >= 5
      results.push(word.reverse)
    else
      results.push(word)
    end
  end
  results.join(" ")
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def spinWords(string)
  string.split.map { |s| s.length >= 5 ? s.reverse : s }.join ' '
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Simple Pig Latin</h3>
    <p>Move the first letter of each word to the end of it, then add 'ay' to the end of the word. Example: pig_it('Pig latin is cool') # igPay atinlay siay oolcay</p>
    <a data-toggle="collapse" href="#collapse25">Answer</a>
  </div>

  <div id="collapse25" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def pig_it(string)
 string.split(" ").map do |word|
    word[1..-1] + word[0] + "ay"
  end.join(" ")
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Array.diff</h3>
    <p>Your goal in this kata is to implement an difference function, which subtracts one list from another. It should remove all values from list a, which are present in list b. Ex. array_diff([1,2],[1]) == [2]</p>
    <a data-toggle="collapse" href="#collapse26">Answer</a>
  </div>

  <div id="collapse26" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def array_diff(a, b)
  if a.include? b[0] 
    a.delete(b[0])
    a
  else
    a
  end
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def array_diff(a, b)
  a - b
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def array_diff(a, b)
  a.reject {|e| b.include? e}
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Find the odd int</h3>
    <p>Given an array, find the int that appears an odd number of times. There will always be only one integer that appears an odd number of times.</p>
    <a data-toggle="collapse" href="#collapse27">Answer</a>
  </div>

  <div id="collapse27" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def find_it(seq)
  hash = Hash.new(0)
  seq.each{|key| hash[key] += 1}

  hash.each do |key, value|
    if value.odd?
      return key
    end
  end
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Jenny's secret message</h3>
    <p>Jenny has written a function that returns a greeting for a user. However, she's in love with Johnny, and would like to greet him slightly different. She added a special case to her function, but she made a mistake.Can you help her?</p>
    <a data-toggle="collapse" href="#collapse28">Answer</a>
  </div>

  <div id="collapse28" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def greet(name)
  name != "Johnny" ? "Hello, #{name}!" : "Hello, my love!"
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Return Negative</h3>
    <p>In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative? Ex: makeNegative(1); # return -1</p>
    <a data-toggle="collapse" href="#collapse29">Answer</a>
  </div>

  <div id="collapse29" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">
def makeNegative(num)
  num.to_s.split("")[0] == "-" ? num : num*-1
end
</pre>

<pre class="prettyprint lang-ruby linenums">
def makeNegative(num)
  num > 0 ? -num : num
end
</pre>
    </div>
  </div>
</div>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title"></h3>
    <p></p>
    <a data-toggle="collapse" href="#collapse30">Answer</a>
  </div>

  <div id="collapse30" class="panel-collapse collapse">
    <div class="panel-body">
<pre class="prettyprint lang-ruby linenums">

</pre>
    </div>
  </div>
</div>